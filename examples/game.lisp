(import "gfx")
(import "math")

(let frame_count 0)
(let first true)
(let was_mouse_down false)
(let width 1024)
(let height 1024)

(let bomb_speed 0.1)
(let bomb_pulse 0.03)
(let missile_speed 18.0)
(let missile_pulse 0.1)
(let missile_limit 10)
(let explosion_radius 40.0)
(let explosion_speed 1.0)
(let explosion_fade 3.0)
(let ground_flash 0.0)
(let ground_flash_time 5.0)

(let dark_grey (vec3 0 0 0))
(let black (vec3 0 0 0))
(let white (vec3 1 1 1))
(let red (vec 1 0 0))

(let city_count 4)
(let city_scale_x 50.0)
(let city_scale_y 25.0)
(let city_pulse 0.03)

(let plane_model (list
            (vec2-0.9921875 -0.1015625)
            (vec2 -0.7890625 0.03515625)
            (vec2 -0.3125 0.05078125)
            (vec2 0.0703125 0.2890625)
            (vec2 0.18359375 0.2578125)
            (vec2 0.09765625 0.0546875)
            (vec2 0.76171875 0.05078125)
            (vec2 0.90234375 0.1953125)
            (vec2 0.84765625 -0.1015625)
            (vec2 0.1328125 -0.08984375)
            (vec2 0.1953125 -0.328125)
            (vec2 0.046875 -0.3203125)
            (vec2 -0.3125 -0.10546875)
            (vec2 -0.9921875 -0.1015625)))

(let plane (list false))
(let plane_chance 0.003)
(let plane_bomb_range (* 0.8 width))
(let plane_max_bomb_distance (/ width 5))
(let plane_bombs 5)
(let plane_speed 2.5)
(let plane_y_max (/ height 2))
(let plane_y_min 50)
(let plane_scale_x 30.0)
(let plane_scale_y 30.0)

(func plane_tick (plane)
      ((let active (nth plane 0))
       (if active
           ((let hit false)
            (let x (nth plane 1))
            (let y (nth plane 2))
            (let pos (vec2 x y))
            (map explosions (lambda (expl)
                              (set hit (or hit (< (distance (nth expl 0) pos) (+ (nth expl 1) plane_scale_x))))))
            (if hit
                 ((set active false)
                 (explosion_create pos)))))
       (if active
           ((let x (- (nth plane 1) plane_speed))
            (set active (> x 0))
            (let y (nth plane 2))
            (let bomb_x (nth plane 3))
            (let dropped (nth plane 4))
            (if (and (! dropped) (< x bomb_x))
                ((set dropped true)
                 (let count 0)
                 (let min_x (- x plane_max_bomb_distance))
                 (loop (! (> count plane_bombs))
                       ((set bombs (cons (plane_bomb_create min_x x x y) bombs))
                        (set count (+ count 1))))))
            (list active x y bomb_x dropped))
         (if (> plane_chance (rand))
             ((set active true)
              (let y (+ (* (rand) (- plane_y_max plane_y_min)) plane_y_min))
              (let x width)
              (let bomb_x (- width (* (rand) plane_bomb_range)))
              (let dropped false)
              (list true x y bomb_x dropped))
           (list false)))))

(func render_plane (plane)
      ((let x (nth plane 1))
       (let y (nth plane 2))
       (map plane_model (lambda (point)
                    ((let p_x (+ x (* plane_scale_x (vec_x point))))
                     (let p_y (+ y (* plane_scale_y (* (+ 1 (vec_y point)) -1))))
                     (vec2 p_x p_y))))))

(let city_safe (list
              (vec2 -1 -1)
              (vec2 -0.99609375 0)
              (vec2 -0.80078125 -0.00390625)
              (vec2 -0.796875 0.19921875)
              (vec2 -0.6015625 0.1953125)
              (vec2 -0.6015625 -0.3046875)
              (vec2 -0.49609375 -0.30078125)
              (vec2 -0.4921875 0.98828125)
              (vec2 -0.30078125 0.9921875)
              (vec2 -0.296875 0.6953125)
              (vec2 0.00390625 0.6953125)
              (vec2 0 0.1953125)
              (vec2 0.1015625 0.1953125)
              (vec2 0.1015625 0.390625)
              (vec2 0.3046875 0.390625)
              (vec2 0.29296875 -0.296875)
              (vec2 0.5 -0.2890625)
              (vec2 0.50390625 0.3984375)
              (vec2 0.69921875 0.3984375)
              (vec2 0.69921875 -0.99609375)))

(let city_damaged (list
                   (vec2 -1 -0.99609375)
                   (vec2 -0.96875 -0.2890625)
                   (vec2 -0.79296875 0.00390625)
                   (vec2 -0.67578125 0.10546875)
                   (vec2 -0.6328125 -0.125)
                   (vec2 -0.6015625 -0.3046875)
                   (vec2 -0.49609375 -0.30078125)
                   (vec2 -0.4765625 -0.04296875)
                   (vec2 -0.390625 0.3828125)
                   (vec2 -0.28125 0.5078125)
                   (vec2 -0.046875 0.2578125)
                   (vec2 0 0.1953125)
                   (vec2 0.03515625 -0.0625)
                   (vec2 0.18359375 0.26953125)
                   (vec2 0.30859375 0.18359375)
                   (vec2 0.34375 -0.28515625)
                   (vec2 0.4453125 -0.24609375)
                   (vec2 0.58203125 -0.07421875)
                   (vec2 0.64453125 -0.3828125)
                   (vec2 0.69921875 -0.99609375)))

(let city_destroyed (list
                     (vec2 -1 -0.98828125)
                     (vec2 -0.9453125 -0.84765625)
                     (vec2 -0.81640625 -0.84765625)
                     (vec2 -0.69921875 -0.88671875)
                     (vec2 -0.625 -0.765625)
                     (vec2 -0.53125 -0.8984375)
                     (vec2 -0.4296875 -0.78515625)
                     (vec2 -0.34375 -0.67578125)
                     (vec2 -0.13671875 -0.87890625)
                     (vec2 0.06640625 -0.765625)
                     (vec2 0.234375 -0.8671875)
                     (vec2 0.41796875 -0.85546875)
                     (vec2 0.54296875 -0.796875)
                     (vec2 0.59375 -0.8984375)
                     (vec2 0.6640625 -0.9140625)
                     (vec2 0.69921875 -0.99609375)))

(let cities (list))

(func create_cities ()
      ((let segments (+ city_count 3))
       (let launcher (+ (/ city_count 2) 1))
       (let left 0)
       (let right (- segments 1))
       (let counter 0)
       (let spacer (/ width right))
       (let positions (list))
       (loop (< counter segments)
             ((if (and (!(= counter left)) (!(= counter launcher)) (!(= counter right)))
                  ((set positions (cons (* counter spacer) positions))))
              (set counter (+ 1 counter))))
       (set cities (map positions (lambda (pos) (list 0 pos (render_city pos 0) (* 2 (rand))))))))

(func render_city (x_pos state)
      ((let model city_safe)
       (if (= state 1) (set model city_damaged))
       (if (= state 2) (set model city_destroyed))
       (map model (lambda (point)
                    ((let p_x (+ x_pos (* city_scale_x (vec_x point))))
                     (let p_y (+ height (* city_scale_y (* (+ 1 (vec_y point)) -1))))
                     (vec2 p_x p_y))))))

(func city_hit (city pos)
      ((let city_pos (nth city 1))
       (let state (nth city 0))
       (let model (nth city 2))
       (let pulse (nth city 3))
       (if (and (> pos (- city_pos city_scale_x)) (< pos (+ city_pos city_scale_x)) (< state 2))
           ((set state (+ state 1))
            (set model (render_city city_pos state))))
       (list state city_pos model pulse)))

(func city_tick (city)
      ((let pulse (+ city_pulse (nth city 3)))
       (list (nth city 0) (nth city 1) (nth city 2) pulse)))

(func city_color (city)
      ((let state (nth city 0))
       (let color white)
       (if (= state 1)
           ((let green (pulse_value (nth city 3) 0 128 255))
            (set color (vec3 1 green 0))))
       (if (= state 2) (set color (vec3 0.125 0.125 0.125)))
       (color)))

(func distance (a b)
      ((let x1 (vec_x a))
       (let x2 (vec_x b))
       (let y1 (vec_y a))
       (let y2 (vec_y b))
       (sqrt (+ (* (- x2 x1) (- x2 x1)) (* (- y2 y1) (- y2 y1))))))

(func rand_point (x y) ((vec2 (* x (rand)) y)))

(func bomb_create () ((let start (rand_point width 0))
                      (list start (rand_point width height) start 0.0 true bomb_speed (* (rand) 2.0))))

(func plane_bomb_create (min_x max_x x y)
      ((let start (vec2 x y))
       (let range_x (- max_x min_x))
       (let end (rand_point range_x height))
       (set end (vec2 (+ (vec_x end) min_x) (vec_y end)))
       (list start end start 0.0 true bomb_speed (* (rand) 2.0))))

(func bomb_hit (bomb explosions)
      ((let y (vec_y (nth bomb 2)))
       (let hit (> y height))
       (if hit
           ((set ground_flash ground_flash_time)
            (set cities (map cities (lambda (city)
                                      (city_hit city (vec_x (nth bomb 2))))))))
       (map explosions (lambda (expl)
               (set hit (or hit (< (distance (nth expl 0) (nth bomb 2)) (nth expl 1))))))
       (hit)))

(func bomb_tick (bomb)
      (((let start (nth bomb 0))
        (let end (nth bomb 1))
        (let speed (nth bomb 5))
        (let age (+ speed (nth bomb 3)))
        (let x_distance (- (vec_x end) (vec_x start)))
        (let y_distance (- (vec_y end) (vec_y start)))
        (let travelled (/ age 100.0))
        (let new_x (+ (* x_distance travelled) (vec_x start)))
        (let new_y (+ (* y_distance travelled) (vec_y start)))
        (let alive (< age 100.0))
        (let pulse (+ (nth bomb 6) bomb_pulse))
        (list start end (vec2 new_x new_y) age alive speed pulse))))

(func bomb_color (bomb)
      ((let red (pulse_value (nth bomb 6) 32 255 255))
       (vec3 red 0.0 0.0)))

(func missile_create (mouse)
      ((let start launcher_pos)
       (let mouse_x (vec_x mouse))
       (let mouse_y (vec_y mouse))
       (let angle (atan2 (-(vec_y launcher_pos) mouse_y) (- mouse_x (vec_x launcher_pos))))
       (let delta_x (* (cos angle) missile_speed))
       (let delta_y (* (sin angle) missile_speed -1))
       (list start mouse start 0.0 true delta_x delta_y (* (rand) 2))))

(func missile_tick (missile)
      (((let start (nth missile 0))
        (let end (nth missile 1))
        (let current (nth missile 2))
        (let current_x (vec_x current))
        (let current_y (vec_y current))
        (let delta_x (nth missile 5))
        (let delta_y (nth missile 6))
        (let age (+ missile_speed (nth missile 3)))
        (let alive (> current_y (vec_y end)))
        (let new_x (+ delta_x current_x))
        (let new_y (+ delta_y current_y))
        (let pulse (+ (nth missile 7) missile_pulse))
        (list start end (vec2 new_x new_y) age alive delta_x delta_y pulse))))

(func missile_color (missile)
      ((let green (pulse_value (nth missile 7) 0 128 255))
       (vec3 0 green 1.0)))

(func pulse_value (tick start end limit)
       ((let range (- end start))
       (let value (% tick 2.0))
       (set value (if (> value 1.0) (- 1.0 (- value 1.0)) (value)))
       (/ (+ (* value range) start) limit)))

(func explosion_create (pos)
      ((list pos 0.0 0.0 true red)))

(func explosion_tick (expl)
      ((let radius (nth expl 1))
       (let fade (nth expl 2))
       (let color_scale (+ radius fade))
       (let color_end (* 1.8 explosion_radius))
       (let green (- 1.0 (/ color_scale color_end)))
       (let blue (- 1.0 (/ (* 2.0 color_scale) color_end)))
       (if (> green 1) (set green 1.0))
       (if (> blue 1) (set blue 1.0))
       (let alive (if (< radius explosion_radius)
                      ((set radius (+ radius explosion_speed)) (true))
                    (if (< fade explosion_radius)
                        ((set fade (+ fade explosion_fade)) true)
                      (false))))
       (list (nth expl 0) radius fade alive (vec3 1 green blue))))

(func draw_crosshair (display mouse)
      ((let x (vec_x mouse))
       (let y (vec_y mouse))
       (draw_line display (vec2 (- x 5) y) (vec2 (- x 20) y) white)
       (draw_line display (vec2 (+ x 5) y) (vec2 (+ x 20) y) white)
       (draw_line display (vec2 x (- y 5)) (vec2 x (- y 20)) white)
       (draw_line display (vec2 x (+ y 5)) (vec2 x (+ y 20)) white)))

(let bombs (list))
(let missiles (list))
(let explosions (list))

(let launcher_pos (vec2 (/ width 2.0) (height)))

(func init ()
      ((set_clear_color display black)
       (set_line_width display 5.0)
       (create_cities)))


(create_window width height (lambda (display mouse inputs) (
    (if first (init))
    (set first false)

    (if (> ground_flash 0)
        ((set_clear_color display white)
         (set ground_flash (- 1 ground_flash)))
      (set_clear_color display black))

    (set cities
         (map cities (lambda (city)
                       ((draw_line_list display (nth city 2) (city_color city))
                        (city_tick city)))))

    (if (and (< (len bombs) 8) (> (rand) 0.895)) ((set bombs (cons (bomb_create) bombs))))

    (set bombs
         (map bombs
              (lambda (bomb)
                ((let hit (bomb_hit bomb explosions))
                 (if hit (set explosions (cons (explosion_create (nth bomb 2)) explosions)))
                 (if (and (nth bomb 4) (! hit))
                            ((draw_line display (nth bomb 0) (nth bomb 2) (bomb_color bomb))
                             (bomb_tick bomb))
                          (nil))))))

    (let is_mouse_down false)
    (map inputs
         (lambda (input)
           ((if (= input "mouse_left")
                ((set is_mouse_down true)
                 (if (and (! was_mouse_down) (< (len missiles) missile_limit))
                     (set missiles (cons (missile_create mouse) missiles))))))))
    (set was_mouse_down is_mouse_down)

    (set plane (plane_tick plane))
    (if (nth plane 0) (draw_line_list display (render_plane plane) white))

    (set explosions
         (map explosions
              (lambda (expl) (if (nth expl 3)
                            ((draw_circle display (nth expl 0) (nth expl 1) (nth expl 4))
                             (draw_circle display (nth expl 0) (nth expl 2) dark_grey)
                             (explosion_tick expl))
                          (nil)))))

    (set missiles
         (map missiles
              (lambda (missile) (if (nth missile 4)
                               ((draw_line display (nth missile 0) (nth missile 2) (missile_color missile))
                                (missile_tick missile))
                             ((set explosions (cons (explosion_create (nth missile 2)) explosions))
                              (nil))))))

    (draw_circle display launcher_pos 40 (vec3 0 0.75 1))

    (draw_crosshair display mouse)

    (set frame_count (+ 1 frame_count))
)))
